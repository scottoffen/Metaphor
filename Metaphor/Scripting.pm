yamlpackage Metaphor::Scripting;
our $VERSION = '1.0.0';

#########################################||#########################################
#                                                                                  #
# Metaphor::Scripting                                                              #
# © Copyright 2011-2014 Scott Offen (http://www.scottoffen.com)                    #
#                                                                                  #
#########################################||#########################################


#----------------------------------------------------------------------------------#
# Pragmas and modules to use                                                       #
#----------------------------------------------------------------------------------#
	use strict;
	use warnings;
	use Carp;
	use Metaphor::Config;
	use Metaphor::Logging;
	use JSON::PP;
	use YAML::Any;
	use XML::Simple;
	use base 'Exporter';
#----------------------------------------------------------------------------------#


#----------------------------------------------------------------------------------#
# Service Initialization                                                           #
#----------------------------------------------------------------------------------#
BEGIN
{
	#----------------------------------------------------------------------------------#
	# Set default environment variables and untaint them all                           #
	#----------------------------------------------------------------------------------#
	$ENV{REQUEST_METHOD} = 'GET' unless defined $ENV{REQUEST_METHOD};
	$ENV{HTTP_HOST}      = 'localhost' unless defined $ENV{HTTP_HOST};

	foreach my $key ('PATH_INFO', 'CONTENT_TYPE', 'HTTP_ACCEPT', 'REQUEST_URI')
	{
		$ENV{$key} = '' unless defined $ENV{$key};
	}

	foreach my $key (keys %ENV)
	{
		unless (ref $ENV{$key})
		{
			$ENV{$key} = $1 if ($ENV{$key} =~ /^(.*)$/)
		}
	}
	#----------------------------------------------------------------------------------#
}
#----------------------------------------------------------------------------------#


#----------------------------------------------------------------------------------#
# Global Variables                                                                 #
#----------------------------------------------------------------------------------#
	our @EXPORT = qw(GetContent GetQuery);

	#----------------------------------------------------------------------------------#
	# Content-type definitions                                                         #
	#----------------------------------------------------------------------------------#
	our $TYPES =
	{
		'default' => 'application/json',
		'text'    => 'text/plain',
		'json'    => 'application/json',
		'xml'     => 'text/xml',
		'appxml'  => 'application/xml',
		'yaml'    => 'text/yaml',
		'appyaml' => 'application/x-yaml'
	};
	#----------------------------------------------------------------------------------#


	#----------------------------------------------------------------------------------#
	# Try to use CGI::Simple, fallback on CGI.pm, croak if everything fails            #
	#----------------------------------------------------------------------------------#
	our $QUERY;
	{
		eval { require CGI::Simple };

		if ($@)
		{
			eval { use CGI(":standard") };
			croak "Unable to load CGI or CGI::Simple : $@" if ($@);
			$QUERY = new CGI();
		}
		else
		{
			$QUERY = new CGI::Simple();
		}
	}
	#----------------------------------------------------------------------------------#

	our $DEBUG = ((param('debug')) && (param('debug') == 1)) ? 1 : 0;
	Metaphor::Logging->Console($DEBUG);
#----------------------------------------------------------------------------------#


###############################|     GetContent     |###############################
# Exported                                                                         #
#----------------------------------------------------------------------------------#
sub GetContent
{
	my $CONTENT = {};
	my $content = {};

	#------------------------------------------------------------------------------------#
	# Parse data based on the content-type header                                        #
	#------------------------------------------------------------------------------------#
	{
		#------------------------------------------------------------------------------------#
		# Url encoded or multipart form data                                                 #
		#------------------------------------------------------------------------------------#
		if ((!$ENV{'CONTENT_TYPE'}) || ($ENV{'CONTENT_TYPE'} =~ /^(application\/x-www-form-urlencoded|multipart\/form-data).*$/i))
		{
			my @keys = $QUERY->param;
			foreach my $key (@keys)
			{
				$CONTENT->{$key} = $QUERY->param($key);
			}
		}
		#------------------------------------------------------------------------------------#


		#------------------------------------------------------------------------------------#
		# Other supported types                                                              #
		#------------------------------------------------------------------------------------#
		else
		{
			my $data = $QUERY->param('POSTDATA');

			#------------------------------------------------------------------------------------#
			# JSON via JSON::PP                                                                  #
			#------------------------------------------------------------------------------------#
			if ($ENV{'CONTENT_TYPE'} =~ /(json|javascript)$/i)
			{
				try
				{
					$CONTENT = decode_json($data);
				}
				catch
				{
					WARN("Error Decoding JSON : $_");
				};
			}
			#------------------------------------------------------------------------------------#


			#------------------------------------------------------------------------------------#
			# XML via XML::Simple                                                                #
			#------------------------------------------------------------------------------------#
			elsif ($ENV{'CONTENT_TYPE'} =~ /xml$/i)
			{
				try
				{
					$CONTENT = XMLin($data);
				}
				catch
				{
					WARN("Error Decoding XML : $_");
				};
			}
			#------------------------------------------------------------------------------------#


			#------------------------------------------------------------------------------------#
			# YAML via YAML::Any                                                                 #
			#------------------------------------------------------------------------------------#
			elsif ($ENV{'CONTENT_TYPE'} =~ /yaml$/i)
			{
				try
				{
					$CONTENT = Load($data);
				}
				catch
				{
					WARN("Error Decoding YAML : $_");
				};
			}
			#------------------------------------------------------------------------------------#
		}
		#------------------------------------------------------------------------------------#
	}
	#------------------------------------------------------------------------------------#


	#------------------------------------------------------------------------------------#
	# Normalize the key strings to lowercase                                             #
	#------------------------------------------------------------------------------------#
	foreach my $key (keys %$CONTENT)
	{
		$content->{lc($key)} = $CONTENT->{$key};
	}
	#------------------------------------------------------------------------------------#

	return $content; #--> Return the normalized content
}
#########################################||#########################################



################################|     GetQuery     |################################
# Exported                                                                         #
#----------------------------------------------------------------------------------#
sub GetQuery
{
	return $QUERY;
}
#########################################||#########################################



1;