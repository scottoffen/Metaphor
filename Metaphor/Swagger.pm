package Metaphor::Swagger;
our $VERSION = '1.0.0';

#########################################||#########################################
#                                                                                  #
# Metaphor::Swagger                                                                #
# Â© Copyright 2011-2014 Scott Offen (http://www.scottoffen.com)                    #
#                                                                                  #
#########################################||#########################################


#----------------------------------------------------------------------------------#
# Pragmas and modules to use                                                       #
#----------------------------------------------------------------------------------#
	use strict;
	use warnings;
	use Metaphor::Config;
	use Metaphor::Logging;
	use Metaphor::Storage qw(GetFileName);
	use Metaphor::Util qw(Declassify);
	use JSON::PP;
	use Data::Dumper;
#----------------------------------------------------------------------------------#


#----------------------------------------------------------------------------------#
# Module Initialization                                                            #
#----------------------------------------------------------------------------------#
BEGIN
{
	#----------------------------------------------------------------------------------#
	# Set default environment variables and untaint them all                           #
	#----------------------------------------------------------------------------------#
	$ENV{REQUEST_METHOD} = 'GET' unless defined $ENV{REQUEST_METHOD};
	$ENV{HTTP_HOST}      = 'localhost' unless defined $ENV{HTTP_HOST};
	$ENV{REQUEST_URI}    = '' unless defined $ENV{REQUEST_URI};
	#----------------------------------------------------------------------------------#
}
#----------------------------------------------------------------------------------#


#----------------------------------------------------------------------------------#
# Global Variables                                                                 #
#----------------------------------------------------------------------------------#
	my  $config    = (exists GetConfig()->{'swagger'}) ? GetConfig()->{'swagger'} : { 'api-version' => '1.0.0', 'swagger-version' => '1.2' };

	our $ENABLED   = 0;
	our $A_VERSION = $config->{'api-version'};
	our $S_VERSION = $config->{'swagger-version'};
	our $RESOURCE  = GetFileName($ENV{REQUEST_URI}) || '';
	    $RESOURCE  = '/' . $RESOURCE;
	our $BASEPATH  = join('', ('http://', $ENV{HTTP_HOST}, $ENV{REQUEST_URI}));
	    $BASEPATH  =~ s/$RESOURCE\/$//;
#----------------------------------------------------------------------------------#


#----------------------------------------------------------------------------------#
# Swagger API                                                                      #
#----------------------------------------------------------------------------------#
our $API =
{
	swaggerVersion => $S_VERSION,
	apiVersion     => $A_VERSION,
	basePath       => $BASEPATH,
	resourcePath   => $RESOURCE,
	apis           => {},
	models         => {}
};
#----------------------------------------------------------------------------------#


##################################|     new     |###################################
sub new
{
	return bless {}, shift;
}
#########################################||#########################################



#################################|     GetAPI     |#################################
# Public Static                                                                    #
#----------------------------------------------------------------------------------#
sub GetAPI
{
	my %API  = map { $_, $API->{$_} } keys %$API;
	my $apis = [];

	foreach my $path (keys %{$API{apis}})
	{
		my $api = { path => $path, operations => $API{apis}->{$path}};
		push(@$apis, $api);
	}

	$API{apis} = $apis;
	return \%API;
}
#########################################||#########################################



#################################|     Enable     |#################################
# Public Static                                                                    #
#----------------------------------------------------------------------------------#
sub Enable
{
	$ENABLED = 1;
}
#########################################||#########################################



################################|     IsEnabled     |###############################
# Public Static                                                                    #
#----------------------------------------------------------------------------------#
sub IsEnabled
{
	return $ENABLED;
}
#########################################||#########################################



#################################|     Config     |#################################
# Public Static                                                                    #
#----------------------------------------------------------------------------------#
sub Config
{
	my $class  = shift;
	my $params = ((scalar @_ > 0) && (ref $_[0] eq 'HASH')) ? shift : {};

	foreach my $key (keys %$params)
	{
		$API->{$key} = $params->{$key};
	}
}
#########################################||#########################################



#################################|     AddApi     |#################################
# Public Static                                                                    #
#----------------------------------------------------------------------------------#
sub AddApi
{
	my ($path, $api) = Declassify(\@_, __PACKAGE__);
	if ((defined $path) && (ref $api eq 'HASH'))
	{
		$API->{apis}->{$path} = [] unless (exists $API->{apis}->{$path});
		push(@{$API->{apis}->{$path}}, $api);
	}
}
#########################################||#########################################



################################|     AddModel     |################################
# Public Static                                                                    #
# 0 : Object (string, hashref)                                                     #
#----------------------------------------------------------------------------------#
sub AddModel
{
	my ($id, $model) = Declassify(\@_, __PACKAGE__);
	if ((defined $id) && (ref $model eq 'HASH'))
	{
		$API->{models}->{$id} = $model;
	}
}
#########################################||#########################################



################################|     AddModels     |###############################
# Public Static                                                                    #
# 0 : hashref                                                                      #
#----------------------------------------------------------------------------------#
sub AddModels
{
	my ($models) = Declassify(\@_, __PACKAGE__);

	if (ref $models eq 'HASH')
	{
		AddModel($_, $models->{$_}) foreach (keys %$models);
	}
}
#########################################||#########################################



1;