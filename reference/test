#!C:\lang\perl\bin\perl.exe
#!/usr/bin/perl
use strict;
use warnings;

#----------------------------------------------------------------------------------#
# Initialization                                                                   #
#----------------------------------------------------------------------------------#
BEGIN
{
	$| = 1;
	unshift(@INC, 'C:/source/github/common-perl');
}
#----------------------------------------------------------------------------------#


#----------------------------------------------------------------------------------#
# External Dependencies                                                            #
#----------------------------------------------------------------------------------#
	use Common::Logging;
	use Common::Util;
	use Example::User;
	use Common::REST;
	use Common::Swagger;
#----------------------------------------------------------------------------------#


#----------------------------------------------------------------------------------#
# Service Configuration                                                            #
#----------------------------------------------------------------------------------#
	# Get current authenticated session
	# my $session = [package]::Session->GetCurrent();

	# Create global regex values
	my $guid = '[a-f0-9]{8}\-[a-f0-9]{4}\-[a-f0-9]{4}\-[a-f0-9]{4}\-[a-f0-9]{12}';

	# Send log output to a file
	Common::Logging->StartLog({ file => "service.txt", level => 'ALL' });

	# Send log output to the console
	# Common::Logging->ConsoleOn();

	# Enable Swagger.  Creating a new object is not
	# required, but it makes it easier to work with.
	my $swagger = new Common::Swagger();
	$swagger->Enable();
	$swagger->AddModels(Example::User->Models());
#----------------------------------------------------------------------------------#


#########################################||#########################################
#                                                                                  #
# The eval block will attempt every HANDLER combinations defined until it succeeds #
# and exits or it barfs and/or produces an error.                                  #
#                                                                                  #
#########################################||#########################################
eval
{
	#----------------------------------------------------------------------------------#
	# Check Authenticated                                                              #
	#----------------------------------------------------------------------------------#
	# unless (ref $session)
	# {
	# 	barf('401', '<!doctype html><html><head><title>401 Not Authenticated</title></head><body><h1>Not Authenticated</h1></body></html>');
	# }
	#----------------------------------------------------------------------------------#


	#----------------------------------------------------------------------------------#
	# GET : Return an existing user                                                    #
	#----------------------------------------------------------------------------------#
	Route { REQUEST_METHOD => qr{^(get|head)$}i, PATH_INFO => qr{^/user/($guid)$}i } =>
	sub
	{
		my ($request, $content) = @_;

		my $user = new Example::User($request->{PATH_INFO});

		if ($user)
		{
		 	SetContent({ user => $user->Simplify() });
		}
		else
		{
			SetContent({ error => "Unable to locate user (" . $request->{PATH_INFO} . ")" });
		}
	};
	$swagger->AddApi("/user/{id}",
	{
		"method"           => "GET",
		"summary"          => "Find user by id",
		"notes"            => "Returns a user based on id",
		"type"             => "User",
		"nickname"         => "getUserById",
		"parameters"       =>
		[
			{
				"name"          => "id",
				"description"   => "Id of user that needs to be fetched",
				"required"      => "true",
				"type"          => "string",
				"paramType"     => "path",
				"allowMultiple" => "false"
			}
		],
		"responseMessages" =>
		[
			{
				"code"    => 400,
				"message" => "Invalid id supplied"
			},
			{
				"code"    => 404,
				"message" => "User not found"
			}
		]
	});
	#----------------------------------------------------------------------------------#


	#----------------------------------------------------------------------------------#
	# GET : Return all users                                                           #
	#----------------------------------------------------------------------------------#
	Route { REQUEST_METHOD => qr{^(get|head)$}i, PATH_INFO => qr{^/users$}i } =>
	sub
	{

		my ($request, $content) = @_;

		my $users = Example::User->List();

		foreach my $user (@$users)
		{
			delete ($user->{Password});
			delete ($user->{Salt});
			$user->{IsActive} = ($user->{IsActive}) ? 'true' : 'false';
		}

	 	SetContent($users);
	};
	$swagger->AddApi("/users",
	{
		"method"           => "GET",
		"summary"          => "Find all users",
		"notes"            => "Returns a list of all users",
		"type"             => "array",
		"items"            => { '$ref' => 'User' },
		"nickname"         => "getAllUsers",
		"parameters"       => [],
		"responseMessages" => []
	});
	#----------------------------------------------------------------------------------#


	#----------------------------------------------------------------------------------#
	# POST : Create a new user                                                         #
	#----------------------------------------------------------------------------------#
	Route { REQUEST_METHOD => qr{^post$}i, PATH_INFO => qr{^/user$}i } =>
	sub
	{
		my ($request, $content) = @_;

		my $data =
		{
			FirstName => $content->{firstname},
			LastName  => $content->{lastname},
			Email     => $content->{email},
			Password  => $content->{password}
		};

		my $user = new Example::User($data);
		$user = (($user) && ($user->Save())) ? $user : undef;

		if ($user)
		{
			SetContent({ user => $user->Simplify() });
		}
	};
	$swagger->AddApi("/user",
	{
		"method"           => "POST",
		"summary"          => "Create user",
		"notes"            => "Creates a new user",
		"type"             => "User",
		"nickname"         => "createUser",
		"parameters"       =>
		[
			{
				"name"          => "FirstName",
				"description"   => "",
				"type"          => "string",
				"paramType"     => "form",
				"required"      => "true",
				"allowMultiple" => "false"
			},
			{
				"name"          => "LastName",
				"description"   => "",
				"type"          => "string",
				"paramType"     => "form",
				"required"      => "true",
				"allowMultiple" => "false"
			},
			{
				"name"          => "Email",
				"description"   => "",
				"type"          => "string",
				"paramType"     => "form",
				"required"      => "true",
				"allowMultiple" => "false"
			},
			{
				"name"          => "Password",
				"description"   => "",
				"type"          => "string",
				"paramType"     => "form",
				"required"      => "true",
				"allowMultiple" => "false"
			},
			{
				"name"          => "IsActive",
				"description"   => "",
				"type"          => "boolean",
				"paramType"     => "form",
				"allowMultiple" => "false"
			}
		],
		"responseMessages" =>
		[
			{
				"code"    => 405,
				"message" => "Invalid input"
			}
		]
	});
	#----------------------------------------------------------------------------------#


	#----------------------------------------------------------------------------------#
	# PUT : Update existing user                                                       #
	#----------------------------------------------------------------------------------#
	Route { REQUEST_METHOD => qr{^put$}i, PATH_INFO => qr{^/user/($guid)$}i } =>
	sub
	{
		my ($request, $content) = @_;

		my $user   = new Example::User($request->{PATH_INFO});
		my $result = 0;

		if ($user)
		{
			$user->FirstName($content->{firstname}) if (defined $content->{firstname});
			$user->LastName($content->{lastname})   if (defined $content->{lastname});
			$user->Email($content->{email})         if (defined $content->{email});
			$user->Password($content->{password})   if (defined $content->{password});

			$result = ($user->Save()) ? 'true' : 'false';

			SetContent({ result => $result, user => $user->Simplify() });
		}
		else
		{
			SetContent({ result => 'false' });
		}
	};
	$swagger->AddApi("/user/{id}",
	{
		"method"           => "PUT",
		"summary"          => "Update a user",
		"notes"            => "Updates an existing user based on id",
		"type"             => "User",
		"nickname"         => "putUser",
		"parameters"       =>
		[
			{
				"name"          => "id",
				"description"   => "Id of user that needs to be updated",
				"required"      => "true",
				"type"          => "string",
				"paramType"     => "path",
				"allowMultiple" => "false"
			},
			{
				"name"          => "FirstName",
				"description"   => "",
				"type"          => "string",
				"paramType"     => "form",
				"allowMultiple" => "false"
			},
			{
				"name"          => "LastName",
				"description"   => "",
				"type"          => "string",
				"paramType"     => "form",
				"allowMultiple" => "false"
			},
			{
				"name"          => "Email",
				"description"   => "",
				"type"          => "string",
				"paramType"     => "form",
				"allowMultiple" => "false"
			},
			{
				"name"          => "Password",
				"description"   => "",
				"type"          => "string",
				"paramType"     => "form",
				"allowMultiple" => "false"
			}
		],
		"responseMessages" =>
		[
			{
				"code"    => 400,
				"message" => "Invalid id supplied"
			},
			{
				"code"    => 404,
				"message" => "User not found"
			}
		]
	});
	#----------------------------------------------------------------------------------#


	#----------------------------------------------------------------------------------#
	# POST/PUT : Activate or deactivate a user                                         #
	#----------------------------------------------------------------------------------#
	Route { REQUEST_METHOD => qr{^(post|put)$}i, PATH_INFO => qr{^/user/($guid)/(activate|deactivate)$}i } =>
	sub
	{
		my ($request, $content) = @_;
		my ($id, $method) = @{$request->{PATH_INFO}};

		my $user   = new Example::User($id);

		if ($user)
		{
			my $result = (lc($method) eq 'activate') ? $user->Activate() : $user->Dectivate();
			SetContent({ result => ($result) ? 'true' : 'false' });
		}
		else
		{
			SetContent({ result => 'false' });
		}
	};
	$swagger->AddApi("/user/{id}/{action}",
	{
		"method"           => "PUT",
		"summary"          => "Activate or deactivate a user",
		"notes"            => "Activate or deactivate an existing user based on id",
		"type"             => "void",
		"nickname"         => "userActivation",
		"parameters"       =>
		[
			{
				"name"          => "id",
				"description"   => "Id of user that needs to be activated",
				"required"      => "true",
				"type"          => "string",
				"paramType"     => "path",
				"allowMultiple" => "false"
			},
			{
				"name"          => "action",
				"description"   => "Activation action to take",
				"required"      => "true",
				"type"          => "string",
				"enum"          =>
				[
					"activate",
					"deactivate"
				],
				"paramType"     => "path",
				"allowMultiple" => "false"
			}
		],
		"responseMessages" =>
		[
			{
				"code"    => 400,
				"message" => "Invalid id supplied"
			},
			{
				"code"    => 404,
				"message" => "User not found"
			}
		]
	});
	#----------------------------------------------------------------------------------#


	#----------------------------------------------------------------------------------#
	# DELETE : Delete a user                                                           #
	#----------------------------------------------------------------------------------#
	Route { REQUEST_METHOD => qr{^delete$}i, PATH_INFO => qr{^/user/($guid)$}i } =>
	sub
	{
		my ($request, $content) = @_;

		my $user = new Example::User($request->{PATH_INFO});

		if ($user)
		{
			my $result = ($user->Delete()) ? 'true' : 'false';
		 	SetContent({ deleted => $result });
		}
		else
		{
			SetContent({ error => "Unable to locate user (" . $request->{PATH_INFO} . ")" });
		}
	};
	$swagger->AddApi("/user/{id}",
	{
		"method"           => "DELETE",
		"summary"          => "Delete user by id",
		"notes"            => "Deletes a user based on id",
		"type"             => "void",
		"nickname"         => "deleteUser",
		"parameters"       =>
		[
			{
				"name"          => "id",
				"description"   => "Id of user that needs to be deleted",
				"required"      => "true",
				"type"          => "string",
				"paramType"     => "path",
				"allowMultiple" => "false"
			}
		],
		"responseMessages" =>
		[
			{
				"code"    => 400,
				"message" => "Invalid id supplied"
			},
			{
				"code"    => 404,
				"message" => "User not found"
			}
		]
	});
	#----------------------------------------------------------------------------------#
};
#########################################||#########################################


#----------------------------------------------------------------------------------#
# Swagger Resourse Listing : Description                                           #
#----------------------------------------------------------------------------------#
=begin description
Operations for users
=end description
=cut
#----------------------------------------------------------------------------------#