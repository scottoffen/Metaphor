package Common::BaseX;
our $VERSION = '1.0.0.0';

#########################################||#########################################
#                                                                                  #
# Common::BaseX                                                                    #
# © Copyright 2011-2014 Scott Offen (http://www.scottoffen.com)                    #
#                                                                                  #
#########################################||#########################################


#----------------------------------------------------------------------------------#
# Pragmas and modules to use                                                       #
#----------------------------------------------------------------------------------#
	use strict;
	use warnings;
	use Common::Logging;
#----------------------------------------------------------------------------------#


##################################|     new     |###################################
# Public                                                                           #
#----------------------------------------------------------------------------------#
sub new
{
	#----------------------------------------------------------------------------------#
	# Get the class information and create the object to be blessed                    #
	#----------------------------------------------------------------------------------#
	my $class = shift;
	my $self  = {};
	my $valid = 1;
	#----------------------------------------------------------------------------------#


	#----------------------------------------------------------------------------------#
	# Initialize the object                                                            #
	#----------------------------------------------------------------------------------#
	$self->{base10} = {};
	$self->{baseX}  = {};
	$self->{base}   = 0;
	#----------------------------------------------------------------------------------#


	#----------------------------------------------------------------------------------#
	# Get incoming parameters                                                          #
	#----------------------------------------------------------------------------------#
	if (@_)
	{
		my @digits = @_;
		my $digits = scalar @digits;

		if ($digits > 1)
		{
			$self->{base} = $digits;

			for (my $i = 0; $i < $digits; $i += 1)
			{
				$self->{baseX}->{$digits[$i]} = $i;
				$self->{base10}->{$i} = $digits[$i];
			}
		}
		else
		{
			$valid = 0;
		}
	}
	#----------------------------------------------------------------------------------#


	#----------------------------------------------------------------------------------#
	# Bless and return the object                                                      #
	#----------------------------------------------------------------------------------#
	if ($valid)
	{
		bless($self, $class);
		return $self;
	}
	else
	{
		DEBUG("Insufficient characters provided to create BaseX");
		return undef;
	}
	#----------------------------------------------------------------------------------#
}
#########################################||#########################################



############################|     ConvertToBase10     |#############################
# Public                                                                           #
#----------------------------------------------------------------------------------#
sub ConvertToBase10
{
	my $self   = shift;
	my $base_x = shift;
	my $base10 = 0;

	my @digits = split(//, $base_x);
	my $power  = scalar @digits;

	for (my $i = 0; $i < scalar @digits; $i++)
	{
		$power--;
		$base10 += $self->{baseX}->{$digits[$i]} * ($self->{base}**$power);
	}

	return $base10;
}
#########################################||#########################################



###########################|     ConvertFromBase10     |############################
# Public                                                                           #
#----------------------------------------------------------------------------------#
sub ConvertFromBase10
{
	my $self   = shift;
	my $base10 = shift;
	my $base_x = undef;

	while ($base10 >= $self->{base})
	{
		my $digit = $base10 % $self->{base};
		$base_x = (defined $base_x) ? $self->{base10}->{$digit} . $base_x : $self->{base10}->{$digit};
		$base10 = int($base10 / $self->{base});
	}

	$base_x = $self->{base10}->{$base10} . $base_x;

	return $base_x;
}
#########################################||#########################################



1;