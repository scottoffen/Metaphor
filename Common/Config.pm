package Common::Config;
our $VERSION = '1.0.0.0';

#########################################||#########################################
#                                                                                  #
# Common::Config                                                                   #
# © Copyright 2011-2014 Scott Offen (http://www.scottoffen.com)                    #
#                                                                                  #
#########################################||#########################################


#----------------------------------------------------------------------------------#
# Pragmas and modules to use                                                       #
#----------------------------------------------------------------------------------#
	use strict;
	use warnings;
	use JSON::PP;
	use XML::Simple qw(:strict);
	use base 'Exporter';
#----------------------------------------------------------------------------------#


#----------------------------------------------------------------------------------#
# Global Variables                                                                 #
#----------------------------------------------------------------------------------#
	our @EXPORT = qw(GetConfig LoadConfig);
	our $KEY    = "_CONFIG";
	our $DEF    = "config.json";
#----------------------------------------------------------------------------------#


###############################|     GetConfig     |################################
# Exported                                                                         #
#----------------------------------------------------------------------------------#
sub GetConfig
{
	if ((defined $ENV{$KEY}) && (ref $ENV{$KEY} eq 'HASH'))
	{
		return $ENV{$KEY};
	}
	else
	{
		if (LoadConfig(@_))
		{
			return $ENV{$KEY};
		}

		return {};
	}
}
#########################################||#########################################



###############################|     LoadConfig     |###############################
# Exported                                                                         #
#----------------------------------------------------------------------------------#
sub LoadConfig
{
	my $file = shift;

	$file = Locate($file);

	if (($file) && (-e $file))
	{
		if ($file =~ /\.xml$/i)
		{
			return LoadXML($file);
		}
		elsif ($file =~ /\.json/i)
		{
			return LoadJson($file);
		}
	}

	return 0;
}
#########################################||#########################################



################################|     LoadJson     |################################
# Private                                                                          #
#----------------------------------------------------------------------------------#
sub LoadJson
{
	my $file = shift;

	my $data = do
	{
		open(my $json_fh, "<:encoding(UTF-8)", $file);
		local $/;
		<$json_fh>
	};

	$ENV{$KEY} = decode_json($data);

	return 1;
}
#########################################||#########################################



#################################|     LoadXML     |################################
# Private                                                                          #
#----------------------------------------------------------------------------------#
sub LoadXML
{
	my $file = shift;
	$ENV{$KEY} = XMLin($file, ForceArray => 0, KeyAttr => {});
	return 1;
}
#########################################||#########################################



#################################|     Locate     |#################################
# Private                                                                          #
#----------------------------------------------------------------------------------#
sub Locate
{
	my $file = ((scalar @_ > 0) && ($_[0])) ? shift : $DEF;

	if ($file)
	{
		if (-e $file)
		{
			$ENV{$KEY} = $file;
		}
		else
		{
			foreach my $location (@INC)
			{
				if (-e join('/', ($location, $file)))
				{
					$ENV{$KEY} = join('/', ($location, $file));
					last;
				}
			}
		}
	}

	return $ENV{$KEY};
}
#########################################||#########################################



1;