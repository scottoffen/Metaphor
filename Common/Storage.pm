package Common::Storage;
our $VERSION = '1.0.0.0';

#########################################||#########################################
#                                                                                  #
# Common::Storage                                                                  #
# © Copyright 2011-2014 Scott Offen (http://www.scottoffen.com)                    #
#                                                                                  #
#########################################||#########################################


#----------------------------------------------------------------------------------#
# Pragmas and modules to use                                                       #
#----------------------------------------------------------------------------------#
	use strict;
	use warnings;
	use Fcntl qw(:DEFAULT :flock);
	use base 'Exporter';
#----------------------------------------------------------------------------------#


#----------------------------------------------------------------------------------#
# Global Variables and Exports                                                     #
#----------------------------------------------------------------------------------#
	our @EXPORT    = qw(CreateFolder DeleteFolder DownloadFile GetFileName GetListing);
	our @EXPORT_OK = qw(GetFileAsBase64);
#----------------------------------------------------------------------------------#


#############################|     Create Folder     |##############################
# Exported                                                                         #
#----------------------------------------------------------------------------------#
sub CreateFolder
{
	my $folder = shift;
	my (@path, $path, $error);

	#----------------------------------------------------------------------------------#
	# Immediate returns if there is no folder or if the folder already exists.         #
	#----------------------------------------------------------------------------------#
	return undef unless ($folder);
	return $folder if (-d $folder);
	#----------------------------------------------------------------------------------#


	#----------------------------------------------------------------------------------#
	# Clean up the folder path and put it into an array                                #
	#----------------------------------------------------------------------------------#
	$folder =~ s/\\{1,}/\//g;
	@path   = split(/\//, $folder);

	shift (@path) unless ($path[0]);  #--> Remove any leading whitespace
	pop   (@path) unless ($path[-1]); #--> Remove any trailing whitespace
	#----------------------------------------------------------------------------------#


	#----------------------------------------------------------------------------------#
	# Create the return value.  On Win32 machines, it is assumed that the first value  #
	# in the array created in the previous step is a drive letter, and therefore pre-  #
	# populates this in the return value and removes the first element from the array. #
	#----------------------------------------------------------------------------------#
	$path = ($^O =~ /^MSWin.+/i) ? shift(@path) : '';
	#----------------------------------------------------------------------------------#


	#----------------------------------------------------------------------------------#
	# Create the folder                                                                #
	#----------------------------------------------------------------------------------#
	foreach my $folder (@path)
	{
		next unless ($folder);

		$path = join('/', ($path, $folder));
		$path = $1 if ($path =~ /^(.+)$/);

		unless (-d $path)
		{
			mkdir($path, 0777) || ($error = $!);
		}

		last if ($error);
	}
	#----------------------------------------------------------------------------------#

	return ($error) ? $path : "!$error";
}
#########################################||#########################################



#############################|     Delete Folder     |##############################
# Exported                                                                         #
#----------------------------------------------------------------------------------#
sub DeleteFolder
{
	my $folder = $1 if ($_[0] =~ /^(.+)$/);

	#----------------------------------------------------------------------------------#
	# Immediate returns if there is no folder or if the folder does not exists.        #
	#----------------------------------------------------------------------------------#
	return undef unless (($folder) && (-e $folder) && (-d $folder));
	#----------------------------------------------------------------------------------#


	#----------------------------------------------------------------------------------#
	# Delete folder                                                                    #
	#----------------------------------------------------------------------------------#
	{
		#----------------------------------------------------------------------------------#
		# Read the folder contents                                                         #
		#----------------------------------------------------------------------------------#
		opendir(DIR, "$folder");
		my @contents = readdir(DIR);
		closedir(DIR);
		#----------------------------------------------------------------------------------#


		#----------------------------------------------------------------------------------#
		# Delete contents of folder                                                        #
		#----------------------------------------------------------------------------------#
		foreach my $file (@contents)
		{
			next if ($file =~ /^\.{1,2}$/);
			$file = $1 if ($file =~ /^(.+)$/);

			if (-d "$folder/$file")
			{
				&DeleteFolder("$folder/$file");
			}
			else
			{
				unlink("$folder/$file");
			}
		}
		#----------------------------------------------------------------------------------#

		rmdir("$folder");
	}
	#----------------------------------------------------------------------------------#
}
#########################################||#########################################



##############################|     DownloadFile     |##############################
# Exported                                                                         #
#----------------------------------------------------------------------------------#
sub DownloadFile
{
	my $path = (@_) ? shift : undef;
	my $file = (@_) ? shift : 'file';

	if (-e $path)
	{
		print "Content-Type:application/octet-stream\n";
		print "Content-Disposition:attachment;filename=$file\n\n";

		open(DLFILE, "< $path");
		binmode(DLFILE);
		print <DLFILE>;
		close (DLFILE);
	}
	else
	{
		print "Content-type: text/html\n\n";
		print "File $path not found.\n";
	}

	return 1;
}
#########################################||#########################################



#############################|     GetFileAsBase64     |############################
# Export OK                                                                        #
#----------------------------------------------------------------------------------#
sub GetFileAsBase64
{
	my ($file) = @_;
	my $data;

	if ((-e $file) && (!(-d $file)))
	{
		local $/ = undef;

		open(FILE, $file);
		flock (FILE, LOCK_SH);
		binmode FILE unless (-T $file);
		my $d = join('', <FILE>);
		close(FILE);

		$data = encode_base64($d);
	}

	return $data;
}
#########################################||#########################################



###############################|     GetFileName     |##############################
# Exported                                                                         #
#----------------------------------------------------------------------------------#
sub GetFileName
{
	my $path = shift;
	my $file = undef;
	my @path;

	if (($path) && (length $path > 0))
	{
		$path =~ s/\\{1,}/\//g;
		@path = split(/\//, $path);

		$file = $path[-1];
	}

	return $file;
}
#########################################||#########################################



###############################|     GetListing     |###############################
# Exported                                                                         #
#----------------------------------------------------------------------------------#
sub GetListing
{
	my $directory = CreateFolder($_[0]);
	my $listing   = [];

	opendir(DIR, "$directory");
	while (my $item = readdir(DIR))
	{
		next if (-d join('/', ($directory, $item)));
		next if ($item =~ /^thumbs\.db$/i);

		push(@$listing, $item);
	}
	closedir(DIR);

	return $listing;
}
#########################################||#########################################



1;
