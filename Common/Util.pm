package Common::Util;
our $VERSION = '1.0.0.0';

#########################################||#########################################
#                                                                                  #
# Common::Util                                                                     #
# Â© Copyright 2011-2014 Scott Offen (http://www.scottoffen.com)                    #
#                                                                                  #
#########################################||#########################################


#----------------------------------------------------------------------------------#
# Pragmas and modules to use                                                       #
#----------------------------------------------------------------------------------#
	use strict;
	use warnings;
	use Time::HiRes;
	use base 'Exporter';
#----------------------------------------------------------------------------------#


#----------------------------------------------------------------------------------#
# Global Variables                                                                 #
#----------------------------------------------------------------------------------#
	our @EXPORT = qw(
		CreateGuid
		RandomString
		RandomNumber
		TrimString
		IsGuid
		IsEmail
		IsBool
		IsNumber
		IsNumberInRange
		IsPhone
		FormatPhone
		IsIPAddress
		IsPostalCode
		IsCreditCard
		CompareString
	);
#----------------------------------------------------------------------------------#


##############################|     Create Guid     |###############################
# Exported                                                                         #
#----------------------------------------------------------------------------------#
sub CreateGuid
{
	my $guid = '09EAB114C555' . sprintf("%05d", $$) . sprintf("%.6f", Time::HiRes::time());

	$guid =~ s/\.//g;
	$guid = substr($guid, 0, 8) . '-' . substr($guid, 8, 4) . '-' . substr($guid, 12, 4) . '-' . substr($guid, 16, 4) . '-' . substr($guid, 20, 12);

	return $guid;
}
#########################################||#########################################



##############################|     RandomString     |##############################
# Exported                                                                         #
# 0 : Length of string                                                             #
#----------------------------------------------------------------------------------#
sub RandomString
{
	my $length = shift;
	my @chars  = ('A'..'Z','0'..'9');

	my $result;

	foreach (1..$length)
	{
		$result .= $chars[rand @chars];
	}

	return $result;
}
#########################################||#########################################



##############################|     RandomNumber     |##############################
# Exported                                                                         #
# 0 : Range                                                                        #
# 1 : Offset                                                                       #
#----------------------------------------------------------------------------------#
sub RandomNumber
{
    my $range   = ((@_) && ($_[0] =~ /^(\d+$)/)) ? shift : 1;
    my $offset  = ((@_) && ($_[0] =~ /^(\d+$)/)) ? shift : 0;
    my $result  = int(rand($range)) + $offset;

    return $result;
}
#########################################||#########################################



###############################|     TrimString     |###############################
# Exported                                                                         #
# 0 : String                                                                       #
#----------------------------------------------------------------------------------#
sub TrimString
{
	my $value = shift;

	$value =~ s/^\s//;
	$value =~ s/\s$//;

	return $value;
}
#########################################||#########################################



#################################|     IsGuid     |#################################
# Exported                                                                         #
# 0 : String                                                                       #
#----------------------------------------------------------------------------------#
sub IsGuid
{
	my $value  = shift;
	my $result = (($value) && ($value =~ /^[a-f0-9]{8}\-[a-f0-9]{4}\-[a-f0-9]{4}\-[a-f0-9]{4}\-[a-f0-9]{12}$/i)) ? 1 : 0;

    return $result;
}
#########################################||#########################################



################################|     IsEmail     |#################################
# Exported                                                                         #
# 0 : String                                                                       #
#----------------------------------------------------------------------------------#
sub IsEmail
{
	my $value  = shift;
	my $result = (($value) && ($value =~ /^[a-zA-Z0-9._%+-]+@(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,4}$/)) ? 1 : 0;

	return $result;
}
#########################################||#########################################



#################################|     IsBool     |#################################
# Exported                                                                         #
# 0 : String                                                                       #
#----------------------------------------------------------------------------------#
sub IsBool
{
	my $value  = shift;

	if (defined $value)
	{
		if ($value =~ /^(0|1)$/)
		{
			return 1;
		}
	}

	return 0;
}
#########################################||#########################################



##############################|     IsIPAddress     |###############################
# Exported                                                                         #
# 0 : String                                                                       #
#----------------------------------------------------------------------------------#
sub IsIPAddress
{
	my $value  = shift;

	if (defined $value)
	{
		if ($value =~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/i)
		{
			return 1;
		}
	}

	return 0;
}
#########################################||#########################################



################################|     Is Phone     |################################
# Exported                                                                         #
# 0 : String                                                                       #
#----------------------------------------------------------------------------------#
sub IsPhone
{
	my $value  = shift;

	if (defined $value)
	{
		$value =~ s/\D//g; #--> Removes all non-digit characters from the string
		if ($value =~ /\d{10,}/)
		{
			return $value;
		}
	}

	return 0;
}
#########################################||#########################################



##############################|     FormatPhone     |###############################
# Exported                                                                         #
# 0 : String                                                                       #
#----------------------------------------------------------------------------------#
sub FormatPhone
{
	my $value = ((scalar @_ > 0) && (defined $_[0])) ? shift : undef;

	if (defined $value)
	{
		$value =~ s/\D//g;
		if ($value =~ /^\d{10}$/)
		{
			$value = "(" . substr($value, 0, 3) . ") " . substr($value, 3, 3) . "-" . substr($value, 6);
		}
	}

	return $value;
}
#########################################||#########################################



################################|     IsNumber     |################################
# Exported                                                                         #
# 0 : String                                                                       #
#----------------------------------------------------------------------------------#
sub IsNumber
{
	my $value = ((scalar @_ > 0) && (defined $_[0])) ? shift : undef;

	if (defined $value)
	{
		if ($value =~ /^\-?\d+\.?\d*$/)
		{
			return 1;
		}
	}

	return 0;
}
#########################################||#########################################



############################|     IsNumberInRange     |#############################
# Exported                                                                         #
# 0 : String                                                                       #
#----------------------------------------------------------------------------------#
sub IsNumberInRange
{
	my $value  = shift;
	my $min    = shift;
	my $max    = shift;

	if (defined $value)
	{
		if ((IsNumber($value)) && (IsNumber($min)) && (IsNumber($max)))
		{
			if (($value >= $min) && ($max >= $value))
			{
				return 1;
			}
		}
	}

	return 0;
}
#########################################||#########################################



##############################|     IsPostalCode     |##############################
# Exported                                                                         #
# 0 : String                                                                       #
#----------------------------------------------------------------------------------#
sub IsPostalCode
{
	my $value = ((scalar @_ > 0) && (defined $_[0])) ? shift : undef;

	if (defined $value)
	{
		if (($value =~ /^\d{5}(\-?\d{4})?$/) || (uc($value) =~ /^[A..Z]\d[A..Z]\s?\d[A..Z]\d]$/))
		{
			return 1;
		}
	}

	return 0;
}
#########################################||#########################################



#############################|     Is Credit Card     |#############################
# Exported                                                                         #
# 0 : String                                                                       #
#----------------------------------------------------------------------------------#
sub IsCreditCard
{
	my $value = ((scalar @_ > 0) && (defined $_[0])) ? shift : undef;

	if (defined $value)
	{
		if (($value =~ /^\d{15,16}$/))
		{
			return 1;
		}
	}

	return 0;
}
#########################################||#########################################



#############################|     Compare String     |#############################
# Exported                                                                         #
# 0 : String                                                                       #
# 1 : String                                                                       #
#----------------------------------------------------------------------------------#
sub CompareString
{
	my ($x, $y) = map {lc} @_;
	return undef unless (($x) && ($y));
	return ($x gt $y) ? 1 : ($x lt $y) ? -1 : 0;
}
#########################################||#########################################



1;